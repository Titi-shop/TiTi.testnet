import { NextResponse } from "next/server";

/**
 * ‚úÖ API t·∫°o giao d·ªãch thanh to√°n m·ªõi tr√™n Pi Network
 *  - Nh·∫≠n d·ªØ li·ªáu t·ª´ frontend (amount, memo, metadata)
 *  - G·ª≠i ƒë·∫øn Pi API: https://api.minepi.com/v2/sandbox
 *  - Tr·∫£ v·ªÅ paymentId v√† tr·∫°ng th√°i
 */

export const dynamic = "force-dynamic"; // tr√°nh cache Vercel

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { amount, memo, metadata } = body;

    if (!amount || !memo) {
      return NextResponse.json(
        { error: "Thi·∫øu amount ho·∫∑c memo" },
        { status: 400 }
      );
    }

    const API_KEY = process.env.PI_API_KEY;
const API_URL = process.env.PI_API_URL || "https://api.minepi.com/v2/sandbox";
    if (!API_KEY) {
      console.error("‚ùå Thi·∫øu PI_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng");
      return NextResponse.json({ error: "Thi·∫øu API key" }, { status: 500 });
    }

    console.log("üü¢ [Pi CREATE] G·ª≠i giao d·ªãch m·ªõi t·ªõi Pi Network...");
    console.log("üì¶ D·ªØ li·ªáu g·ª≠i:", { amount, memo, metadata });

    const res = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Key ${API_KEY}`,
      },
      body: JSON.stringify({
        amount,
        memo,
        metadata,
      }),
    });

    const text = await res.text();
    console.log("‚úÖ [Pi CREATE RESULT]:", res.status, text);

    // N·∫øu API tr·∫£ l·ªói x√°c th·ª±c (401)
    if (res.status === 401) {
      console.error("‚ùå Sai API Key ho·∫∑c app ch∆∞a ƒëƒÉng k√Ω domain Pi Network!");
    }

    // Tr·∫£ k·∫øt qu·∫£ v·ªÅ cho frontend
    return new NextResponse(text, {
      status: res.status,
      headers: { "Access-Control-Allow-Origin": "*" },
    });
  } catch (error: any) {
    console.error("üí• [Pi CREATE ERROR]:", error);
    return NextResponse.json(
      { error: error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh" },
      { status: 500 }
    );
  }
}
