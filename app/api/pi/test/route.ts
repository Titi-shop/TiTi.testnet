// app/api/pi/test/route.ts
import { NextResponse } from "next/server";

/**
 * ‚úÖ API test ƒë∆°n gi·∫£n cho Pi Network SDK
 * Cho ph√©p b·∫°n g·ªçi /api/pi/test ƒë·ªÉ ki·ªÉm tra server ho·∫°t ƒë·ªông,
 * v√† nh·∫≠n POST t·ª´ trang /pi/test khi approve ho·∫∑c complete thanh to√°n.
 */

export async function GET() {
  return NextResponse.json({
    message: "‚úÖ Pi Test API is active",
    info: "Use POST /api/pi/test to simulate approve or complete payment",
    example: {
      approve: { action: "approve", paymentId: "123" },
      complete: { action: "complete", paymentId: "123", txid: "abc123" },
    },
  });
}

// ‚úÖ X·ª≠ l√Ω y√™u c·∫ßu POST g·ª≠i t·ª´ client (khi thanh to√°n test)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { action, paymentId, txid } = body;

    if (!action || !paymentId) {
      return NextResponse.json(
        { ok: false, error: "Thi·∫øu tham s·ªë action ho·∫∑c paymentId" },
        { status: 400 }
      );
    }

    // ‚úÖ L·∫•y th√¥ng tin m√¥i tr∆∞·ªùng
    const API_KEY = process.env.PI_API_KEY;
    const API_URL =
      process.env.PI_API_URL || "https://api.minepi.com/v2/sandbox/payments";

    if (!API_KEY) {
      console.error("‚ùå Missing PI_API_KEY in environment variables");
      return NextResponse.json(
        { ok: false, error: "Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng PI_API_KEY" },
        { status: 500 }
      );
    }

    console.log(`üîî [TEST API] ${action.toUpperCase()} paymentId=${paymentId}`);

    // ‚úÖ G·ª≠i request t·ªõi Pi API th·∫≠t (sandbox ho·∫∑c main t√πy env)
    let endpoint = "";
    if (action === "approve") endpoint = `${API_URL}/${paymentId}/approve`;
    else if (action === "complete") endpoint = `${API_URL}/${paymentId}/complete`;
    else
      return NextResponse.json(
        { ok: false, error: "Action kh√¥ng h·ª£p l·ªá" },
        { status: 400 }
      );

    const res = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Key ${API_KEY}`,
      },
      body: action === "complete" ? JSON.stringify({ txid }) : undefined,
    });

    const text = await res.text();

    console.log(`‚úÖ [PI ${action.toUpperCase()} RESULT]:`, res.status, text);

    if (res.status === 401)
      console.error("‚ùå Sai API key ho·∫∑c domain ch∆∞a ƒë∆∞·ª£c khai b√°o trong Pi Developer Portal!");

    return new NextResponse(text, {
      status: res.status,
      headers: { "Access-Control-Allow-Origin": "*" },
    });
  } catch (err: any) {
    console.error("üí• [Pi TEST API ERROR]:", err);
    return NextResponse.json(
      { ok: false, error: err.message || "unknown" },
      { status: 500 }
    );
  }
}
