"use client";

import { useEffect, useState } from "react";
import { useCart } from "../context/CartContext";
import { useRouter } from "next/navigation";

export default function CheckoutPage() {
  const { cart, clearCart, total } = useCart();
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const info = localStorage.getItem("user_info");
    if (info) {
      const parsed = JSON.parse(info);
      setUser(parsed);
    }
  }, []);

  // ‚úÖ H√†m thanh to√°n b·∫±ng Pi th·∫≠t (qua SDK)
  const handlePayWithPi = async () => {
    if (!window.Pi) return alert("‚ùå Kh√¥ng t√¨m th·∫•y Pi SDK. H√£y m·ªü trong Pi Browser!");
    if (cart.length === 0) return alert("üõí Gi·ªè h√†ng tr·ªëng.");

    setLoading(true);
    try {
      // ‚úÖ X√°c th·ª±c ng∆∞·ªùi d√πng
      const scopes = ["payments", "username", "wallet_address"];
      const auth = await window.Pi.authenticate(scopes, (authResult) => authResult);

      console.log("‚úÖ X√°c th·ª±c:", auth);

      // ‚úÖ T·∫°o giao d·ªãch testnet
      const paymentData = {
        amount: total,
        memo: `Thanh to√°n ƒë∆°n h√†ng ${Date.now()}`,
        metadata: { items: cart },
      };

      const payment = await window.Pi.createPayment(paymentData, {
        onReadyForServerApproval: (paymentId) => {
          console.log("‚úÖ Ready for server approval:", paymentId);
        },
        onReadyForServerCompletion: (paymentId, txid) => {
          console.log("‚úÖ Ready for server completion:", paymentId, txid);
        },
        onCancel: (paymentId) => {
          console.warn("‚ùå Giao d·ªãch b·ªã h·ªßy:", paymentId);
          setLoading(false);
        },
        onError: (error, paymentId) => {
          console.error("‚ùå L·ªói:", error);
          setLoading(false);
        },
      });

      console.log("üí∞ K·∫øt qu·∫£ thanh to√°n:", payment);

      // ‚úÖ Ghi ƒë∆°n h√†ng v√†o h·ªá th·ªëng (backend)
      const order = {
        id: Date.now(),
        items: cart,
        total,
        createdAt: new Date().toISOString(),
        buyer: auth.user?.username || "guest",
        status: "Ch·ªù x√°c nh·∫≠n",
        txid: payment.transaction?.txid || null,
      };

      await fetch("/api/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(order),
      });

      clearCart();
      alert("‚úÖ Thanh to√°n th√†nh c√¥ng qua Pi Wallet!");
      router.push("/customer/pending");
    } catch (err) {
      console.error("‚ùå L·ªói khi thanh to√°n:", err);
      alert("Thanh to√°n th·∫•t b·∫°i. H√£y th·ª≠ l·∫°i trong Pi Browser Testnet.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="max-w-3xl mx-auto p-6 bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold mb-4 text-center text-orange-600">
        üí≥ Thanh to√°n
      </h1>

      <div className="bg-white p-4 rounded shadow mb-4 text-sm">
        <pre className="overflow-x-auto bg-gray-50 p-2 rounded text-xs">
          {JSON.stringify(user, null, 2)}
        </pre>
        <p>
          <b>T·ªïng ƒë∆°n h√†ng:</b> {total} Pi
        </p>
      </div>

      <button
        onClick={handlePayWithPi}
        disabled={loading}
        className={`w-full py-3 rounded text-white font-semibold ${
          loading ? "bg-gray-400" : "bg-green-600 hover:bg-green-700"
        }`}
      >
        {loading ? "ƒêang x·ª≠ l√Ω..." : "Thanh to√°n qua Pi Wallet Testnet"}
      </button>
    </main>
  );
}
