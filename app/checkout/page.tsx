"use client";

import { useEffect, useState } from "react";
import { useCart } from "../context/CartContext";
import { useRouter } from "next/navigation";

// üß© Khai b√°o Pi SDK to√†n c·ª•c
declare global {
  interface Window {
    Pi?: any;
  }
}

export default function CheckoutPage() {
  const { cart, clearCart, total } = useCart();
  const [wallet, setWallet] = useState<number>(0);
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState("guest");
  const router = useRouter();

  // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ PiLogin (ƒë√£ l∆∞u trong localStorage)
  useEffect(() => {
    try {
      const isLoggedIn = localStorage.getItem("titi_is_logged_in") === "true";
      const username = localStorage.getItem("titi_username");
      if (isLoggedIn && username) {
        setUser(username);
      } else {
        setUser("guest");
      }
    } catch (err) {
      console.error("User load error:", err);
    }
  }, []);

  // ‚úÖ L·∫•y v√≠ Pi (mock t·∫°m)
  useEffect(() => {
    const w = Number(localStorage.getItem("pi_wallet") ?? "1000");
    setWallet(w);
  }, []);

  // üí∞ H√†m thanh to√°n
  const handlePayWithPi = async () => {
    if (!window.Pi) {
      alert("‚ö†Ô∏è H√£y m·ªü trang n√†y trong Pi Browser ƒë·ªÉ thanh to√°n.");
      return;
    }
    if (cart.length === 0) {
      alert("üõí Gi·ªè h√†ng tr·ªëng.");
      return;
    }
    if (user === "guest") {
      alert("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p b·∫±ng Pi tr∆∞·ªõc khi thanh to√°n!");
      router.push("/pilogin");
      return;
    }

    setLoading(true);

    try {
      // ‚úÖ Kh·ªüi t·∫°o Pi SDK
      window.Pi.init({ version: "2.0", sandbox: true });

      // ‚úÖ X√°c th·ª±c l·∫°i ng∆∞·ªùi d√πng (ƒë·∫£m b·∫£o an to√†n)
      const scopes = ["payments", "username", "wallet_address"];
      const auth = await window.Pi.authenticate(scopes, (res: any) => res);
      console.log("‚úÖ X√°c th·ª±c Pi:", auth);

      // ‚úÖ C·∫•u h√¨nh th√¥ng tin ƒë∆°n h√†ng
      const orderId = Date.now();
      const paymentData = {
        amount: total,
        memo: `Thanh to√°n ƒë∆°n h√†ng #${orderId}`,
        metadata: {
          orderId,
          items: cart,
          buyer: auth.user?.username || user,
        },
      };

      // ‚úÖ Callback x·ª≠ l√Ω c·ªßa Pi SDK
      const callbacks = {
        // 1Ô∏è‚É£ App g·ª≠i y√™u c·∫ßu duy·ªát payment ƒë·∫øn server
        onReadyForServerApproval: async (paymentId: string) => {
          console.log("‚è≥ [APPROVE] ID:", paymentId);
          await fetch("/api/pi/approve", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ paymentId }),
          });
        },

        // 2Ô∏è‚É£ Khi Pi Wallet ho√†n t·∫•t giao d·ªãch v√† g·ª≠i txid v·ªÅ
        onReadyForServerCompletion: async (paymentId: string, txid: string) => {
          console.log("‚úÖ [COMPLETE] ID:", paymentId, "TXID:", txid);

          // G·ª≠i th√¥ng tin l√™n server ƒë·ªÉ x√°c minh txid th·∫≠t
          const res = await fetch("/api/pi/complete", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ paymentId, txid }),
          });

          const result = await res.json();

          // üß† Ch·ªâ t·∫°o ƒë∆°n h√†ng khi backend x√°c minh giao d·ªãch th√†nh c√¥ng
          if (result?.success) {
            const order = {
              id: orderId,
              items: cart,
              total,
              createdAt: new Date().toISOString(),
              buyer: auth.user?.username || user,
              status: "ƒê√£ thanh to√°n",
              note: `Pi TXID: ${txid}`,
            };

            await fetch("/api/orders", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(order),
            });

            clearCart();
            alert("‚úÖ Thanh to√°n qua Pi Wallet th√†nh c√¥ng!");
            router.push("/customer/pending");
          } else {
            alert("‚ö†Ô∏è Giao d·ªãch ƒëang ch·ªù x√°c minh tr√™n Pi Network.");
          }
        },

        // 3Ô∏è‚É£ Khi ng∆∞·ªùi d√πng hu·ª∑
        onCancel: () => alert("‚ùå Giao d·ªãch ƒë√£ b·ªã hu·ª∑."),

        // 4Ô∏è‚É£ Khi c√≥ l·ªói
        onError: (error: any) => {
          console.error("üí• L·ªói thanh to√°n:", error);
          alert("üí• L·ªói trong qu√° tr√¨nh thanh to√°n: " + error.message);
        },
      };

      // ‚úÖ G·ªçi thanh to√°n qua Pi SDK
      await window.Pi.createPayment(paymentData, callbacks);
    } catch (err: any) {
      console.error("‚ùå L·ªói thanh to√°n:", err);
      alert("‚ùå Giao d·ªãch th·∫•t b·∫°i ho·∫∑c b·ªã hu·ª∑.");
    } finally {
      setLoading(false);
    }
  };

  // üß± Giao di·ªán hi·ªÉn th·ªã
  return (
    <main className="max-w-3xl mx-auto p-6 bg-gray-50 min-h-screen">
      <h1 className="text-2xl font-bold mb-4 text-center text-orange-600">
        üí≥ Thanh to√°n
      </h1>

      <div className="bg-white p-4 rounded shadow mb-4">
        <p>
          Ng∆∞·ªùi mua: <b>{user}</b>
        </p>
        <p>
          V√≠ Pi hi·ªán t·∫°i: <b className="text-yellow-600">{wallet} Pi</b>
        </p>
        <p>
          T·ªïng ƒë∆°n h√†ng: <b className="text-yellow-600">{total} Pi</b>
        </p>
      </div>

      <button
        onClick={handlePayWithPi}
        disabled={loading}
        className={`w-full py-3 rounded text-white font-semibold ${
          loading ? "bg-gray-400" : "bg-purple-600 hover:bg-purple-700"
        }`}
      >
        {loading ? "ƒêang m·ªü Pi Wallet..." : "Thanh to√°n b·∫±ng Pi Wallet"}
      </button>
    </main>
  );
}
